from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, PhotoSize
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage, Redis
from config import Config, load_config
import photo_editor

config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token
URL = 'https://api.telegram.org/bot'
redis = Redis(host='localhost')
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = RedisStorage(redis=redis)
settings_dict = {}
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

LEXICON: dict[str, str] = {
    'bt_black': '‚ö´ –ß—ë—Ä–Ω—ã–π',
    'bt_white': '‚ö™ –ë–µ–ª—ã–π',
    'bt_red': 'üî¥ –ö—Ä–∞—Å–Ω—ã–π',
    'bt_orange': 'üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π',
    'bt_yellow': 'üü° –ñ—ë–ª—Ç—ã–π',
    'bt_green': 'üü¢ –ó–µ–ª—ë–Ω—ã–π',
    'bt_blue': 'üîµ –°–∏–Ω–∏–π',
    'bt_turquoise': '‚ùÑÔ∏è–ë–∏—Ä—é–∑–æ–≤—ã–π',
    'bt_hotpink': 'üå∏ –†–æ–∑–æ–≤—ã–π',
    'bt_purple': 'üíú –ü—É—Ä–ø—É—Ä–Ω—ã–π'
}


class FSMEditPhoto(StatesGroup):
    upload_photo = State()
    fill_need_text = State()
    fill_color = State()
    fill_text = State()
    fill_send_photo = State()


@dp.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –ú—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å\n\n'
             '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–æ—Ç–æ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /editphoto'
    )


# @dp.message(Command(commands='cancel'), ~StateFilter(default_state))
# async def process_cancel_command_state(message: Message, state: FSMContext):
#     await message.answer(
#         text='–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ\n\n'
#              '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é - '
#              '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /editphoto'
#     )
#     await state.clear()


# @dp.message(Command(commands='editphoto'), StateFilter(default_state))
# async def process_editphoto_command(message: Message, state: FSMContext):
#     await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
#     await state.set_state(FSMEditPhoto.upload_photo)


@dp.message(F.photo)
async def process_photo_sent(message: Message,
                             state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (file_unique_id –∏ file_id) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    # –ø–æ –∫–ª—é—á–∞–º "photo_unique_id" –∏ "photo_id"
    file_id = message.photo[len(message.photo) - 1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, f'download_photo_{message.chat.id}.jpg')
    await state.update_data(
        photo_unique_id=file_path,
        photo_id=file_id
    )
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    button_yes = InlineKeyboardButton(
        text='‚úÖ –î–∞',
        callback_data='bt_yes'
    )
    button_no = InlineKeyboardButton(
        text='‚ùå –ù–µ—Ç',
        callback_data='bt_no'
    )
    keyboard: list[list[InlineKeyboardButton]] = [[button_yes, button_no]]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text='üñºÔ∏è –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n ‚úíÔ∏è–ù—É–∂–Ω–∞ –ª–∏ –Ω–∞–¥–ø–∏—Å—å?\n\n'
             '‚òùÔ∏è –£—á—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏\n'
             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ = 6Ô∏è‚É£0Ô∏è‚É£',
        reply_markup=markup
    )
    await state.set_state(FSMEditPhoto.fill_color)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
# @dp.message(StateFilter(FSMEditPhoto.upload_photo))
# async def warning_not_photo(message: Message):
#     await message.answer(
#         text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
#              '—Ñ–æ—Ç–æ\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
#              '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
#     )


@dp.callback_query(StateFilter(FSMEditPhoto.fill_color), F.data.in_(['bt_yes']))
async def process_color_vote(callback: CallbackQuery, state: FSMContext):
    await state.update_data(need_text=callback.data)
    keyboard = create_inline_kb(2, 'bt_black', 'bt_white', 'bt_red',
                                'bt_blue', 'bt_yellow', 'bt_green', 'bt_hotpink',
                                'bt_purple', 'bt_turquoise', 'bt_orange')
    await callback.message.edit_text(
        text='–û—Ç–ª–∏—á–Ω–æ!\n\nüé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏...',
        reply_markup=keyboard
    )
    await state.set_state(FSMEditPhoto.fill_color)


@dp.callback_query(StateFilter(FSMEditPhoto.fill_color),
                   F.data.in_(['bt_black', 'bt_white', 'bt_red',
                               'bt_blue', 'bt_yellow', 'bt_green', 'bt_hotpink',
                               'bt_purple', 'bt_turquoise', 'bt_orange']))
async def process_wish_news_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(color=callback.data)
    await callback.message.edit_text(
        text='üëå –•–æ—Ä–æ—à–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
             '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏...'
    )

    await state.set_state(FSMEditPhoto.fill_text)


@dp.message(StateFilter(FSMEditPhoto.fill_text))
async def process_name_sent(message: Message, state: FSMContext):
    await state.update_data(text_on_photo=message.text)
    await message.answer(text='ü§è –ï—â—ë —á—É—Ç—å-—á—É—Ç—å...\n\nü§ñ‚öôÔ∏è –†–∞–±–æ—Ç–∞—é, –æ–∂–∏–¥–∞–π—Ç–µ')
    settings_dict[message.chat.id] = await state.get_data()
    await state.clear()
    photo_create = photo_editor.Photo(message.chat.id, f'download_photo_{message.chat.id}.jpg')
    photo_create.create_photo(text=settings_dict.get(message.chat.id, {}).get('text_on_photo'),
                               chat_id=message.chat.id,
                               color=LEXICON.get(settings_dict.get(message.chat.id, {}).get('color')))
    photo_create.send_photo_file()
    await message.answer(text='ü§ó –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å\n\n'
                              'üòâ –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!\n\n'
                              'ü§ñüì∑ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ!')
    print(settings_dict)
    print(LEXICON.get(settings_dict.get(message.chat.id, {}).get('color')))


@dp.callback_query(StateFilter(FSMEditPhoto.fill_color), F.data.in_(['bt_no']))
async def process_color_vote(callback: CallbackQuery, state: FSMContext):
    await state.update_data(need_text=callback.data)
    await callback.message.edit_text(text='üëå –•–æ—Ä–æ—à–æ.\n\nü§ñ –†–∞–±–æ—Ç–∞—é, –æ–∂–∏–¥–∞–π—Ç–µ...')
    settings_dict[callback.message.chat.id] = await state.get_data()
    await state.clear()
    photo_create = photo_editor.Photo(callback.message.chat.id, f'download_photo_{callback.message.chat.id}.jpg')
    # photo_creator = Photo(callback.message.chat.id, f'download_photo_{callback.message.chat.id}.jpg')
    photo_create.paste_watermark(chat_id=callback.message.chat.id)
    photo_create.send_photo_file()


def create_inline_kb(width: int,
                     *args: str,
                     **kwargs: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []

    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=button))
    kb_builder.row(*buttons, width=width)
    return kb_builder.as_markup()


#

#
#
# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n'
                         f'—ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è–º\n'
                         f'–¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞ "–ï–≥–æ–∑–∞" c. –ö—É–ª—Ç–∞–µ–≤–æ\n\n'
                         f'–†–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ\n'
                         f'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Ñ–æ—Ç–æ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n'
                         f'–ñ–µ–ª–∞—é —É–¥–∞—á–∏!')




if __name__ == '__main__':
    dp.run_polling(bot)

# –ü—Ä–∏—Ö–æ–¥—è—â–∏–µ callback —Å —Å–µ—Ä–≤–µ—Ä–∞
# print(callback.model_dump_json(indent=4, exclude_none=True))
